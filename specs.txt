BALANCE VS CUMULATIVE TOTAL
Balance includes entire transaction history, and is mainly used for assets.
The balance is saved separately to avoid having to download the entire
transaction history.

Cumulative totals are computed for a given subset of transactions, such as for
a given time period, or matching a search term. Because they are always
changing, cumulative totals are not saved.

Cumulative totals are computed by bubbling amounts up to parents

SPLIT TRANSACTIONS

if a transaction has children, debit, credit, currency and amount are
automatically null

parent transactions by default have null debits and credits. So when browsing
an account and a (sub)transaction matches, we must traverse back up to find
the top-level transaction, and back down to find all relevant sibling
transactions.

by default, set timestamp to be equal to that of root transaction. otherwise
when searching, part of the transaction may be left out.

save a "root transaction id" then search set of transactions matching "root
id".

BALANCES

keep balances in memory, as separate dictionary

keep balances as a separate firebase child/branch, to avoid downloading entire
transaction history

wrap adding a transaction and updating balance in an atomic transaction,
otherwise could have data inconsistencies

DEMO

use memory instead of firebase persistence

PERSISTENCE

Firebase account: hcproradio@gmail.com

Firebase usage limits:
5 GB Database transfer
100 MB Database storage

1 GB Hosting storage
100 GB Hosting transfer

Firebase login is asynchronous. Redirect after successful login, and use
var authData = firebaseRef.getAuth() to ensure is logged in. Redirect to
login page if not.

BROAD POINTS

Firebase is the first choice for data persistence because it is free and simple
to use

Decouple interface from persistence. Firebase is free up to a limit and the
service may be turned off.

DATA STRUCTURE

USER
id is authData.auth.uid
email: authData.password.email;

ACCOUNT
id: String auto-generated by Firebase
name: String (can be duplicated if parent is different)
sign: Integer (+/- 1)
parent: id, null if root account

Assets, Liabilities, Expenses, Income and Equity are default accounts but can
be edited and deleted.

CURRENCY
// http://www.xe.com/symbols.php
code: String three-letter symbol (KEY)
name: String
symbol: String "R$"
showCents: Boolean (false for JPY, for example)
showOnLeft: Boolean ($ 100 or 100 Y)

by default, include USD, EUR, GBP, JPY, INR, AUD, CAD, ZAR, BRL, TWD, NZD

TRANSACTION
id: String AUTO-GENERATED
debit: Integer (id of debited account)
credit: Integer (id of credited account)
timestamp: Integer (milliseconds)
currency: Integer (id of currency)
amount: Integer (check if currency includes cents, if yes, save value as cents)
description: String (limit number of characters to 255)
parent: id, null if top-level transaction. Used for split transactions

SETTING
description: String
mnemonic: String (short version of name, used instead of id)
value: Integer (could be an id, such as currency id for base currency)


What to do when an account is deleted? Transactions should stay, possibly show
a [deleted] label when id for an account no longer exists

NEW ACCOUNT

generate ALEXIE accounts, default currencies, and default settings

DATA FLOW

Draw screens based on

1. loaded account data (from localStorage or Firebase)
2. loaded transaction data

When data is edited, everything needs to be redrawn

